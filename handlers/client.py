# Python –º–æ–¥—É–ª–∏
from aiogram import Router, F
from aiogram.types import *
from aiogram.filters import *
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import StateFilter


# –õ–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏
from create_bot import bot
from utilities import parser
from utilities.logger import logger


# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
router = Router(name='client')

sort = {
    'popular': '–ü–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏',
    'rate': '–ü–æ —Ä–µ–π—Ç–∏–Ω–≥—É',
    'priceup': '–ü–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é —Ü–µ–Ω—ã',
    'pricedown': '–ü–æ —É–±—ã–≤–∞–Ω–∏—é —Ü–µ–Ω—ã',
    'newly': '–ü–æ –Ω–æ–≤–∏–Ω–∫–∞–º',
    'benefit': '–°–Ω–∞—á–∞–ª–∞ –≤—ã–≥–æ–¥–Ω—ã–µ',
}

view = {
    'view_normal': '–ù–æ—Ä–º–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥',
    'view_reverse': '–û–±—Ä–∞—Ç–Ω—ã–π –≤—ã–≤–æ–¥'
}


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
keyboard_cancel = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='search_cancel')]
])

keyboard_search = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='–ü–æ–∏—Å–∫ üîé', callback_data='search')]
])


# –ö–ª–∞—Å—Å
class FSMSearch(StatesGroup):
    first_message = State()
    keyword = State()
    amount = State()
    sort = State()


# –§—É–Ω–∫—Ü–∏–∏
@router.message(Command(commands=['start', 'help'], ignore_case=True))
async def message_start(message: Message):
    try:
        await message.delete()
        await message.answer(
            text=(
                '–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ Wildberries\n'
                '–î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º —Ä–∞–±–æ—Ç—É ‚¨áÔ∏è'
            ),
            reply_markup=keyboard_search
        )

        logger.info(f'USER={message.from_user.id}, MESSAGE=""')
    except Exception as e:
        logger.error(f'USER={message.from_user.id}, MESSAGE="{e}"')


@router.callback_query(F.data == 'search_cancel')
async def callback_cancel(query: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        await state.clear()

        await query.answer()
        await query.message.edit_text(
            text='–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã ‚¨áÔ∏è',
            reply_markup=keyboard_search
        )

        logger.info(f'USER={query.from_user.id}, MESSAGE=""')
    except Exception as e:
        logger.error(f'USER={query.from_user.id}, MESSAGE="{e}"')


@router.callback_query(F.data == 'search')
async def callback_search(query: CallbackQuery, state: FSMContext):
    try:
        await query.answer()
        await query.message.edit_text(
            text=(
                '–í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ–≥–æ, —á—Ç–æ –Ω–∞–º –Ω–∞–¥–æ —É–∫–∞–∑–∞—Ç—å:\n'
                '1. –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ (—Ç–µ–∫—Å—Ç)\n'
                '2. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π\n'
                '3. –ú–µ—Ç–æ–¥ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏\n\n'
                '–î–ª—è –Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –∏—â–∏—Ç–µ ‚¨áÔ∏è'
            ),
            reply_markup=keyboard_cancel
        )
        await state.update_data(first_message=query.message.message_id)
        await state.set_state(state=FSMSearch.keyword)

        logger.info(f'USER={query.from_user.id}, MESSAGE=""')
    except Exception as e:
        logger.error(f'USER={query.from_user.id}, MESSAGE="{e}"')


@router.message(StateFilter(FSMSearch.keyword))
async def message_keyword(message: Message, state: FSMContext):
    try:
        data = await state.get_data()

        await message.delete()
        await bot.edit_message_text(
            chat_id=message.from_user.id,
            message_id=data['first_message'],
            text=(
                '–í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ–≥–æ, —á—Ç–æ –Ω–∞–º –Ω–∞–¥–æ —É–∫–∞–∑–∞—Ç—å:\n'
                f'1. {message.text}\n'
                '2. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π\n'
                '3. –ú–µ—Ç–æ–¥ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏\n\n'
                '–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ –ø–æ–∑–∏—Ü–∏–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å ‚¨áÔ∏è'
            ),
            reply_markup=keyboard_cancel
        )

        await state.update_data(keyword=message.text)
        await state.set_state(state=FSMSearch.amount)

        logger.info(f'USER={message.from_user.id}, MESSAGE=""')
    except Exception as e:
        logger.error(f'USER={message.from_user.id}, MESSAGE="{e}"')


@router.message(StateFilter(FSMSearch.amount))
async def message_amount(message: Message, state: FSMContext):
    try:
        data = await state.get_data()

        reply_markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=sort['popular'], callback_data='popular')],
            [InlineKeyboardButton(text=sort['rate'], callback_data='rate')],
            [InlineKeyboardButton(text=sort['priceup'], callback_data='priceup')],
            [InlineKeyboardButton(text=sort['pricedown'], callback_data='pricedown')],
            [InlineKeyboardButton(text=sort['newly'], callback_data='newly')],
            [InlineKeyboardButton(text=sort['benefit'], callback_data='benefit')],
            [InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='search_cancel')]
        ])

        await message.delete()
        await bot.edit_message_text(
            chat_id=message.from_user.id,
            message_id=data['first_message'],
            text=(
                '–í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ–≥–æ, —á—Ç–æ –Ω–∞–º –Ω–∞–¥–æ —É–∫–∞–∑–∞—Ç—å:\n'
                f'1. {data["keyword"]}\n'
                f'2. {message.text}\n'
                '3. –ú–µ—Ç–æ–¥ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏\n\n'
                '–û—Å—Ç–∞–ª–æ—Å—å —É–∫–∞–∑–∞—Ç—å –º–µ—Ç–æ–¥ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ ‚¨áÔ∏è'
            ),
            reply_markup=reply_markup
        )

        await state.update_data(amount=message.text)
        await state.set_state(state=FSMSearch.sort)

        logger.info(f'USER={message.from_user.id}, MESSAGE=""')
    except Exception as e:
        logger.error(f'USER={message.from_user.id}, MESSAGE="{e}"')


@router.callback_query(StateFilter(FSMSearch.sort))
async def callback_sort(query: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()

        await bot.edit_message_text(
            chat_id=query.from_user.id,
            message_id=data['first_message'],
            text=(
                '–í–æ—Ç –Ω–∞—à —Å–ø–∏—Å–æ–∫ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤:\n'
                f'1. {data["keyword"]}\n'
                f'2. {data["amount"]}\n'
                f'3. {sort[query.data]}\n\n'
                '–¢–µ–ø–µ—Ä—å –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∏, —è –∏—â—É —Ç–æ–≤–∞—Ä—ã üîÑÔ∏è'
            ),
        )

        products = parser.get_products(
            keyword=data['keyword'],
            amount=int(data['amount']),
            sort=query.data
        )

        for product in products:
            await bot.send_photo(
                chat_id=query.from_user.id,
                photo=product['photo'],
                caption=(
                    f'–ù–∞–∑–≤–∞–Ω–∏–µ: <b>{product["name"]}</b>\n'
                    f'–¶–µ–Ω–∞: <b>{product["price"]}‚ÇΩ</b>\n'
                    f'–ê—Ä—Ç–∏–∫—É–ª (—Å—Å—ã–ª–∫–∞): <a href="https://www.wildberries.ru/catalog/{product["id"]}/detail.aspx">{product["id"]}</a>'
                )
            )

        await bot.send_message(
            chat_id=query.from_user.id,
            text='–í–æ—Ç, —á—Ç–æ –º–Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏',
            reply_markup=keyboard_cancel
        )

        await state.clear()

        logger.info(f'USER={query.from_user.id}, MESSAGE=""')
    except Exception as e:
        logger.error(f'USER={query.from_user.id}, MESSAGE="{e}"')
